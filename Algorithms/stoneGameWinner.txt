# The 2-player game of Drawdown is played with a board made up of N groups of stones. The stones at index 0 belong to player 1, the stones at index N - 1 belong to player 2, and the stones at indices [1..N-2] have no owner.
# At the start of each game a board and a list of k moves are provided. Each move is a list of N integers, which represent the number of stones the move adds/removes from the board at each index. All moves reduce the total number of stones on the board. Moves can be re-used, but a move can no longer be performed if doing so would reduce the number of stones in any group below 0.
# After no more moves can be completed, the player with more of their own stones on the board is the winner. In the case of a tie, player 2 wins.

# Example: Let's say the game begins with a board of [6, 4, 2, 4] and these are the available moves provided:
# 1. [-2, -2, 1, 0]
# 2. [-4, -4, 0 ,0]
# 3. [0, 0, -2, -2]

# Player One: 3, Player Two: 2

# Initial board: [6, 4, 2, 4]
# Player 1 decides to perform move 1. New board: [4, 2, 3, 4]
# Player 2 can perform move 1 or move 3. They decide to perform move 1.  New board: [2, 0, 4, 4]
# Player 1 performs move 3 (which is the only move available).  New board: [2, 0, 2, 2]
# Player 2 is now forced to perform move 3. New board: [2, 0, 0, 0]
# The game is now over and player 1 is the winner.


def say_hello
  puts 'Hello, World'
end

5.times { say_hello }

def find_winner(board)
  return board[0] > board[board.length-1] ? 1 : 2
end

print find_winner([2,0,0,2])

def find_winning_games_for_both_players(board)
  # player1_winning_games +=1 if find_winner(board) == 1
  # player2_winning_games +=1 if find_winner(board) == 2
  return 1 if find_winner(board)
  moves.each do |move|
    if isValidMove(board,move)
      (0..move.length).each do |index|
        board[index] = board[index] + move[index]
      end
      find_winning_games_for_both_players(board)
    end
  end
end

def isValidMove(board, move)
  isValid = true
  newBoard = Array.new()
  index = 0
  while index < board.index
    newBoard << board[index] + move[index]
    if newBoard[index] < 0
      isValid = false
      break
    end
  end
  return isValid
end
